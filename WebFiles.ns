Newspeak3
'Root'
class WebFiles usingPlatform: p <Platform> (* :exemplar: ide webFiles*) = (
(* 
Provide basic file access on the web.
File access in the web browser is viewed as uploading and downloading.
It requires a ridiculous rigamarole of Blobs, in-memory URLs, hidden DOM links
to these etc. All this is encapsulated here.

Dealing with directories is only possible via zip files. For now, we utilize the JSZip Javascript library for this.
*)
	|
(* Import JS and Web objects *)
	private window = p js global.
	private document = window at: 'document'.
	JSObject = p js global at: 'Object'.
	JSArray = p js global at: 'Array'.
	JSArrayBuffer = p js global at: 'ArrayBuffer'.
	JSUint8Array = p js global at: 'Uint8Array'.
	JSMap = p js global at: 'Map'.
    JSZip = p js global at: 'JSZip'.
	|
) (
public class Folder named: n <String> (* :exemplar: Folder named: #ExemplarFolder *) = (
	|
    public name = n.
	directory = JSZip new folder: n.
    innerDir = directory folder: n.
	|
) (
public addTextFile: fn <String>  contents: contents <String> (* :exemplar: addTextFile: #dummy1 contents: 'A dummy file'*)= (
  innerDir file: fn contents: contents
)
public asBlob ^ <Alien[Promise[Blob]]> = (
  ^directory generateAsync: blobOptions
)
public save = (
  asBlob then: [:b <Alien[Blob]> | downloadFileName: name blob: b. nil] 
              onError: [:ex | ex printString out]
)
public loadAsync: f <JSZip> options: options <Alien[JSObject]> ^ <Alien[Promise[JSZip]]> = (
  ^innerDir loadAsync: f options: options
)
public addFile: fn <String>  contents: contents <String> (* :exemplar: addFile: #dummy1 contents: 'A dummy file'*)= (
  innerDir file: fn contents: contents
)
public getFolder: fn <String> ^ <Folder> (* :exemplar: getFolder: #dummyFolder *) = (
   ^innerDir folder: fn.
)
public addFolder: fn <String> ^ <Folder> (* :exemplar: addFolder: #dummyFolder *) = (
   ^innerDir folder: fn.
)
) : (
)
public downloadFileName: n <String> blob: b <Alien[Blob]> = (
  | downloadLink = document createElement: 'a'. url = URL createObjectURL: b. |
  (downloadLink at: 'style') at: 'display' put: 'none'.
  downloadLink 
	at: 'download' put: n;
	at: 'href' put: url.
  (document at: 'body')  appendChild: downloadLink.
  downloadLink click.
  URL revokeObjectURL: url.
  (document at: 'body')  removeChild: downloadLink.
)
public downloadFileName: n <String> fromBytes: b <ByteArray> = (
  | 
  options = JSObject new.  
  iterableOptions = JSMap new. 
  buffer = JSArrayBuffer new: b size.  
  data = JSUint8Array new: buffer.
  blobParts = JSArray new: 1.
  blob 
  offset 
  |
  options at: 'type' put: 'application/octet-stream'.
  iterableOptions at: 'type' put: options. (* The use of a map is a hack to get an interable *)
  #BOGUS yourself.(* gross hack to make line below valid in both psoup and NS2V8 *)
  data isKindOfArray ifTrue: [offset:: 0] ifFalse: [offset:: -1].
  1 + offset to: b size + offset do: [:i | data at: i put: (b at: i - offset)].
  blobParts at: 0 put: data.
  blob:: Blob new: blobParts  options: iterableOptions.
  downloadFileName: n blob: blob.
)
Blob = (
  ^window at: 'Blob'.
)
URL = (
  ^window at: 'URL'.
)
blobOptions = (
   | options = JSObject new. |
   options at: #type put: #blob.
   ^options
)
loadFolderNamed: n <String> ^ <Alien[Promise[Blob]]> = (
  | 
  options = JSObject new.  
  f <Alien[File]> = fileChooser chooseSingleFile: [:f <Alien[File]> | 
      | p <Alien[Promise[JSZip]]> = loadAsync: f options: options. |
       p then: [:jsz <JSZip> | directory:: jsz] onError: [:ex | ex printString out].
      ].
  |
 
)
public downloadFileName: n <String> fromString: s <String> = (
  | options = JSObject new.  iterableOptions = JSMap new. data = JSArray new: 1. blob |
  options at: 'ending' put: 'native'.
  iterableOptions at: 'ending' put: options. (* The use of a map is a hack to get an iterable *)
  #BOGUS yourself.(* gross hack to make line below valid in both psoup and NS2V8 *)
  data isKindOfArray ifTrue: [data at: 1 put: s] ifFalse: [data at: 0 put: s].
  blob:: Blob new: data options: iterableOptions.
  downloadFileName: n blob: blob
)
) : (
)
